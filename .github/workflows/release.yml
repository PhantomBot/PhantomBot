name: Build/Upload Release
on:
  release:
    types: [published]
jobs:
  buildtest:
    name: Test Build on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Set up Ant
      run: sudo apt-get install ant
    - name: Build with Ant
      run: ant -noinput -buildfile build.xml test
  updateremotepanel:
    name: Update Remote Panel (Stable)
    if: github.repository == 'PhantomBot/PhantomBot'
    runs-on: ubuntu-latest
    needs: buildtest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
    - name: Copy Files
      run: |
        mkdir -p docs/panel-stable/
        rsync -rv --delete-during --progress resources/web/panel/ docs/panel-stable/
        rsync -rv --delete-during --progress resources/web/common docs
    - name: Commit Changes
      uses: EndBug/add-and-commit@v7
      with:
        message: 'Updated the remote panel (stable)'
        branch: master
  workflowvars:
    name: Setup Workflow Vars
    runs-on: ubuntu-latest
    outputs:
      dockermissing: ${{ steps.check_docker_credentials.outputs.missingsecrets }}
      rollbarmissing: ${{ steps.check_rollbar_credentials.outputs.missingsecrets }}
      servermissing: ${{ steps.check_server_credentials.outputs.missingsecrets }}
      branch: ${{ steps.build_env.outputs.branch }}
      version: ${{ steps.build_env.outputs.version }}
      revision: ${{ steps.build_env.outputs.revision }}
      ghcrrepo: ${{ steps.build_env.outputs.ghcrrepo }}
    steps:
    - name: Get Revision Variables
      id: build_env
      env:
        REPONAME: ${{ github.repository }}
      run: |
        echo ${GITHUB_REF:10}
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF:10})"
        echo ${GITHUB_REF:11}
        echo "##[set-output name=version;]$(echo ${GITHUB_REF:11})"
        echo ${GITHUB_SHA:0:7}
        echo "##[set-output name=revision;]$(echo ${GITHUB_SHA:0:7})"
        echo ${REPONAME} | awk '{print tolower($0)}'
        echo "##[set-output name=ghcrrepo;]$(echo ${REPONAME} | awk '{print tolower($0)}')"
    - name: Check Docker Credentials
      id: check_docker_credentials
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_CLITOKEN: ${{ secrets.DOCKER_CLITOKEN }}
        DOCKER_REPO_STABLE: ${{ secrets.DOCKER_REPO_STABLE }}
      run: |
        if [ "${DOCKER_USER}" == "" ]; then
          echo "Missing User"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        elif [ "${DOCKER_CLITOKEN}" == "" ]; then
          echo "Missing Cli Token"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        elif [ "${DOCKER_REPO_STABLE}" == "" ]; then
          echo "Missing Repo"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        else
          echo "All secrets present"
          echo "##[set-output name=missingsecrets;]$(echo no)"
        fi
    - name: Check Rollbar Credentials
      id: check_rollbar_credentials
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
      run: |
        if [ "${ROLLBAR_ACCESS_TOKEN}" == "" ]; then
          echo "Missing Rollbar Access Token"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        else
          echo "All secrets present"
          echo "##[set-output name=missingsecrets;]$(echo no)"
        fi
    - name: Check Rollbar Passthrough Server Credentials
      id: check_server_credentials
      env:
        ACCESS_TOKEN: ${{ secrets.SERVER_TOKEN }}
        URL: ${{ secrets.SERVER_URL }}
      run: |
        if [ "${ACCESS_TOKEN}" == "" ]; then
          echo "Missing Access Token"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        elif [ "${URL}" == "" ]; then
          echo "Missing URL"
          echo "##[set-output name=missingsecrets;]$(echo yes)"
        else
          echo "All secrets present"
          echo "##[set-output name=missingsecrets;]$(echo no)"
        fi
  build:
    name: Build and upload on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    needs: [buildtest, workflowvars]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Set up Ant
      run: sudo apt-get install ant
    - name: Notify Rollbar of Deploy Start
      if: contains(needs.workflowvars.outputs.rollbarmissing, 'no')
      id: rollbar_deploy
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "started"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
    - name: Prep Ant script
      env:
        BRANCH: ${{ needs.workflowvars.outputs.branch }}
        REVISION: ${{ needs.workflowvars.outputs.revision }}
      run: |
        sed -i -r 's/revision="[A-Za-z0-9._-]+"/revision="'$REVISION'"/;s/branch="[A-Za-z0-9._-]+"/branch="'$BRANCH'"/;s/status="[A-Za-z0-9._-]+"/status="release"/' ivy.xml
        echo $?
    - name: Build with Ant
      env:
        ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
        ROLLBAR_ENDPOINT: ${{ secrets.ROLLBAR_ENDPOINT }}
      run: ant -noinput -Dbuildtype=stable -Drollbar_token=$ROLLBAR_TOKEN -Drollbar_endpoint=$ROLLBAR_ENDPOINT -buildfile build.xml jar
    - name: Prep Assets
      env:
        FOLDERFULL: ${{ format('PhantomBot-{0}', needs.workflowvars.outputs.version) }}
        FOLDERLIN: ${{ format('PhantomBot-{0}-lin', needs.workflowvars.outputs.version) }}
        FOLDERWIN: ${{ format('PhantomBot-{0}-win', needs.workflowvars.outputs.version) }}
        FOLDERMAC: ${{ format('PhantomBot-{0}-mac', needs.workflowvars.outputs.version) }}
        FOLDERARMBSDOTHER: ${{ format('PhantomBot-{0}-arm-bsd-other', needs.workflowvars.outputs.version) }}
      run: |
        mkdir dist/$FOLDERLIN
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERLIN --exclude java-runtime --exclude java-runtime-macos --exclude launch.bat --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERWIN
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERWIN --exclude java-runtime-linux --exclude java-runtime-macos --exclude launch.sh --exclude launch-service.sh --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERMAC
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERMAC --exclude java-runtime-linux --exclude java-runtime --exclude launch.bat --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERARMBSDOTHER
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERARMBSDOTHER --exclude java-runtime-linux --exclude java-runtime --exclude java-runtime-macos --exclude launch.bat --exclude launch-docker.sh
        cd dist
        echo Zip Full
        zip -m -9 -X -r $FOLDERFULL.zip $FOLDERFULL
        echo Zip Lin
        mv -v $FOLDERLIN $FOLDERFULL
        cd $FOLDERFULL
        zip -m -9 -X -r $FOLDERLIN.zip $FOLDERFULL
        cd ..
        mv -v $FOLDERFULL/$FOLDERLIN.zip ./$FOLDERLIN.zip
        rm -rf $FOLDERFULL
        echo Zip Win
        mv -v $FOLDERWIN $FOLDERFULL
        cd $FOLDERFULL
        zip -m -9 -X -r $FOLDERWIN.zip $FOLDERFULL
        cd ..
        mv -v $FOLDERFULL/$FOLDERWIN.zip ./$FOLDERWIN.zip
        rm -rf $FOLDERFULL
        echo Zip Mac
        mv -v $FOLDERMAC $FOLDERFULL
        cd $FOLDERFULL
        zip -m -9 -X -r $FOLDERMAC.zip $FOLDERFULL
        cd ..
        mv -v $FOLDERFULL/$FOLDERMAC.zip ./$FOLDERMAC.zip
        rm -rf $FOLDERFULL
        echo Zip Arm/BSD/Other
        mv -v $FOLDERARMBSDOTHER $FOLDERFULL
        cd $FOLDERFULL
        zip -m -9 -X -r $FOLDERARMBSDOTHER.zip $FOLDERFULL
        cd ..
        mv -v $FOLDERFULL/$FOLDERARMBSDOTHER.zip ./$FOLDERARMBSDOTHER.zip
        rm -rf $FOLDERFULL
    - name: Upload Asset (Full)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ format('dist/PhantomBot-{0}.zip', needs.workflowvars.outputs.version) }}
        asset_name: ${{ format('PhantomBot-{0}.zip', needs.workflowvars.outputs.version) }}
        asset_content_type: application/zip
    - name: Upload Asset (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ format('dist/PhantomBot-{0}-lin.zip', needs.workflowvars.outputs.version) }}
        asset_name: ${{ format('PhantomBot-{0}-lin.zip', needs.workflowvars.outputs.version) }}
        asset_content_type: application/zip
    - name: Upload Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ format('dist/PhantomBot-{0}-win.zip', needs.workflowvars.outputs.version) }}
        asset_name: ${{ format('PhantomBot-{0}-win.zip', needs.workflowvars.outputs.version) }}
        asset_content_type: application/zip
    - name: Upload Asset (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ format('dist/PhantomBot-{0}-mac.zip', needs.workflowvars.outputs.version) }}
        asset_name: ${{ format('PhantomBot-{0}-mac.zip', needs.workflowvars.outputs.version) }}
        asset_content_type: application/zip
    - name: Upload Asset (ARM/BSD/Other)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ format('dist/PhantomBot-{0}-arm-bsd-other.zip', needs.workflowvars.outputs.version) }}
        asset_name: ${{ format('PhantomBot-{0}-arm-bsd-other.zip', needs.workflowvars.outputs.version) }}
        asset_content_type: application/zip
    - name: Notify Rollbar of Deploy Failure
      if: ${{ contains(needs.workflowvars.outputs.rollbarmissing, 'no') && (failure() || cancelled()) }}
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "failed"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
        DEPLOY_ID: ${{ steps.rollbar_deploy.outputs.deploy_id }}
    - name: Notify Rollbar of Deploy Success
      if: ${{ contains(needs.workflowvars.outputs.rollbarmissing, 'no') && success() }}
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "succeeded"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
        DEPLOY_ID: ${{ steps.rollbar_deploy.outputs.deploy_id }}
    - name: Update Allowed Rollbar Versions
      if: ${{ contains(needs.workflowvars.outputs.servermissing, 'no') && success() }}
      env:
        ACCESS_TOKEN: ${{ secrets.SERVER_TOKEN }}
        URL: ${{ secrets.SERVER_URL }}
        VERSION: ${{ needs.workflowvars.outputs.version }}
      run: |
        curl -X POST $URL -H "x-access-token: $ACCESS_TOKEN" -H "Content-Type: application/json; charset=UTF-8" -d "{\"type\":\"stable\",\"version\":\"$VERSION\"}"
  docker:
    name: Docker build on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    needs: [buildtest, workflowvars]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: linux/amd64,linux/arm64,linux/arm/v7
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
    - name: Login to DockerHub Registry
      if: contains(needs.workflowvars.outputs.dockermissing, 'no')
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_CLITOKEN }}
        logout: true
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        logout: true
    - name: Notify Rollbar of Deploy Start
      if: contains(needs.workflowvars.outputs.rollbarmissing, 'no')
      id: rollbar_deploy
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable_docker"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "started"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
    - name: Prep Ant script
      env:
        BRANCH: ${{ needs.workflowvars.outputs.branch }}
        REVISION: ${{ needs.workflowvars.outputs.revision }}
      run: |
        sed -i -r 's/revision="[A-Za-z0-9._-]+"/revision="'$REVISION'"/;s/branch="[A-Za-z0-9._-]+"/branch="'$BRANCH'"/;s/status="[A-Za-z0-9._-]+"/status="release"/' ivy.xml
        echo $?
    - name: Build and Push DockerHub
      if: contains(needs.workflowvars.outputs.dockermissing, 'no')
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        build-args: |
          PROJECT_VERSION=${{ needs.workflowvars.outputs.version }}
          ANT_ARGS=-Dbuildtype=stable -Drollbar_token=${{ secrets.ROLLBAR_TOKEN }} -Drollbar_endpoint=${{ secrets.ROLLBAR_ENDPOINT }}
        tags: |
          ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO_STABLE }}:${{ needs.workflowvars.outputs.version }}
          ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO_STABLE }}:latest
    - name: Build and Push GitHub Containers
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        build-args: |
          PROJECT_VERSION=${{ needs.workflowvars.outputs.version }}
          ANT_ARGS=-Dbuildtype=stable -Drollbar_token=${{ secrets.ROLLBAR_TOKEN }} -Drollbar_endpoint=${{ secrets.ROLLBAR_ENDPOINT }}
        tags: |
          ghcr.io/${{ needs.workflowvars.outputs.ghcrrepo }}:${{ needs.workflowvars.outputs.version }}
          ghcr.io/${{ needs.workflowvars.outputs.ghcrrepo }}:latest
    - name: Notify Rollbar of Deploy Failure
      if: ${{ contains(needs.workflowvars.outputs.rollbarmissing, 'no') && (failure() || cancelled()) }}
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable_docker"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "failed"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
        DEPLOY_ID: ${{ steps.rollbar_deploy.outputs.deploy_id }}
    - name: Notify Rollbar of Deploy Success
      if: ${{ contains(needs.workflowvars.outputs.rollbarmissing, 'no') && success() }}
      uses: rollbar/github-deploy-action@2.1.1
      with:
        environment: "stable_docker"
        version: ${{ needs.workflowvars.outputs.version }}
        status: "succeeded"
      env:
        ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_WRITE_TOKEN }}
        ROLLBAR_USERNAME: ${{ github.actor }}
        DEPLOY_ID: ${{ steps.rollbar_deploy.outputs.deploy_id }}
    - name: Update Allowed Rollbar Versions
      if: ${{ contains(needs.workflowvars.outputs.servermissing, 'no') && success() }}
      env:
        ACCESS_TOKEN: ${{ secrets.SERVER_TOKEN }}
        URL: ${{ secrets.SERVER_URL }}
        VERSION: ${{ needs.workflowvars.outputs.version }}
      run: |
        curl -X POST $URL -H "x-access-token: $ACCESS_TOKEN" -H "Content-Type: application/json; charset=UTF-8" -d "{\"type\":\"stable_docker\",\"version\":\"$VERSION\"}"
